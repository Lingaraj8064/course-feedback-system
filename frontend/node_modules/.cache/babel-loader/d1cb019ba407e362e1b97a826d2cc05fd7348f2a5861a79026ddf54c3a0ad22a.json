{"ast":null,"code":"// Email validation\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Password validation\nexport const isValidPassword = password => {\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n  return password.length >= 8 && passwordRegex.test(password);\n};\n\n// Phone number validation (10 digits)\nexport const isValidPhone = phone => {\n  const phoneRegex = /^\\d{10}$/;\n  return phoneRegex.test(phone);\n};\n\n// Name validation\nexport const isValidName = name => {\n  return name.trim().length >= 2 && name.trim().length <= 50;\n};\n\n// Course code validation\nexport const isValidCourseCode = code => {\n  const codeRegex = /^[A-Z0-9]+$/;\n  return code.length >= 2 && code.length <= 20 && codeRegex.test(code);\n};\n\n// Rating validation\nexport const isValidRating = rating => {\n  return rating >= 1 && rating <= 5 && Number.isInteger(rating);\n};\n\n// Feedback message validation\nexport const isValidFeedbackMessage = message => {\n  return message.trim().length >= 10 && message.trim().length <= 1000;\n};\n\n// File validation for image upload\nexport const isValidImageFile = file => {\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n  const maxSize = 5 * 1024 * 1024; // 5MB\n\n  if (!file) return {\n    isValid: false,\n    error: 'No file selected'\n  };\n  if (!validTypes.includes(file.type)) {\n    return {\n      isValid: false,\n      error: 'Only image files are allowed (JPEG, PNG, GIF, WebP)'\n    };\n  }\n  if (file.size > maxSize) {\n    return {\n      isValid: false,\n      error: 'File size must be less than 5MB'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Form validation helpers\nexport const validateLoginForm = (email, password) => {\n  const errors = {};\n  if (!email) {\n    errors.email = 'Email is required';\n  } else if (!isValidEmail(email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  if (!password) {\n    errors.password = 'Password is required';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\nexport const validateRegisterForm = (name, email, password, confirmPassword) => {\n  const errors = {};\n  if (!name) {\n    errors.name = 'Name is required';\n  } else if (!isValidName(name)) {\n    errors.name = 'Name must be between 2 and 50 characters';\n  }\n  if (!email) {\n    errors.email = 'Email is required';\n  } else if (!isValidEmail(email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  if (!password) {\n    errors.password = 'Password is required';\n  } else if (!isValidPassword(password)) {\n    errors.password = 'Password must be at least 8 characters with uppercase, lowercase, number, and special character';\n  }\n  if (!confirmPassword) {\n    errors.confirmPassword = 'Please confirm your password';\n  } else if (password !== confirmPassword) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\nexport const validateProfileForm = (name, phone, dateOfBirth, address) => {\n  const errors = {};\n  if (!name) {\n    errors.name = 'Name is required';\n  } else if (!isValidName(name)) {\n    errors.name = 'Name must be between 2 and 50 characters';\n  }\n  if (phone && !isValidPhone(phone)) {\n    errors.phone = 'Phone number must be 10 digits';\n  }\n  if (dateOfBirth) {\n    const birthDate = new Date(dateOfBirth);\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    if (age < 13 || age > 100) {\n      errors.dateOfBirth = 'Please enter a valid date of birth';\n    }\n  }\n  if (address && address.length > 200) {\n    errors.address = 'Address cannot exceed 200 characters';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\nexport const validatePasswordChange = (currentPassword, newPassword, confirmPassword) => {\n  const errors = {};\n  if (!currentPassword) {\n    errors.currentPassword = 'Current password is required';\n  }\n  if (!newPassword) {\n    errors.newPassword = 'New password is required';\n  } else if (!isValidPassword(newPassword)) {\n    errors.newPassword = 'Password must be at least 8 characters with uppercase, lowercase, number, and special character';\n  }\n  if (!confirmPassword) {\n    errors.confirmPassword = 'Please confirm your new password';\n  } else if (newPassword !== confirmPassword) {\n    errors.confirmPassword = 'Passwords do not match';\n  }\n  if (currentPassword && newPassword && currentPassword === newPassword) {\n    errors.newPassword = 'New password must be different from current password';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\nexport const validateFeedbackForm = (course, rating, message) => {\n  const errors = {};\n  if (!course) {\n    errors.course = 'Please select a course';\n  }\n  if (!rating || rating === 0) {\n    errors.rating = 'Please provide a rating';\n  } else if (!isValidRating(rating)) {\n    errors.rating = 'Rating must be between 1 and 5';\n  }\n  if (!message) {\n    errors.message = 'Feedback message is required';\n  } else if (!isValidFeedbackMessage(message)) {\n    errors.message = 'Feedback message must be between 10 and 1000 characters';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\nexport const validateCourseForm = (name, code, description, instructor, credits) => {\n  const errors = {};\n  if (!name) {\n    errors.name = 'Course name is required';\n  } else if (name.length < 2 || name.length > 100) {\n    errors.name = 'Course name must be between 2 and 100 characters';\n  }\n  if (!code) {\n    errors.code = 'Course code is required';\n  } else if (!isValidCourseCode(code)) {\n    errors.code = 'Course code must be 2-20 characters with only uppercase letters and numbers';\n  }\n  if (description && description.length > 500) {\n    errors.description = 'Description cannot exceed 500 characters';\n  }\n  if (instructor && instructor.length > 100) {\n    errors.instructor = 'Instructor name cannot exceed 100 characters';\n  }\n  if (credits && (credits < 1 || credits > 10)) {\n    errors.credits = 'Credits must be between 1 and 10';\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Utility functions\nexport const sanitizeInput = input => {\n  return input.trim().replace(/[<>]/g, '');\n};\nexport const formatDate = date => {\n  if (!date) return '';\n  return new Date(date).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\nexport const formatDateTime = date => {\n  if (!date) return '';\n  return new Date(date).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const truncateText = (text, maxLength = 150) => {\n  if (!text || text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\nexport const getRatingColor = rating => {\n  if (rating >= 4) return 'success';\n  if (rating >= 3) return 'warning';\n  return 'error';\n};\nexport const getRatingText = rating => {\n  if (rating >= 4) return 'Excellent';\n  if (rating >= 3) return 'Good';\n  if (rating >= 2) return 'Fair';\n  return 'Poor';\n};\n\n// Export validation patterns for reuse\nexport const VALIDATION_PATTERNS = {\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  PASSWORD: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n  PHONE: /^\\d{10}$/,\n  COURSE_CODE: /^[A-Z0-9]+$/\n};\nexport const VALIDATION_MESSAGES = {\n  REQUIRED: 'This field is required',\n  INVALID_EMAIL: 'Please enter a valid email address',\n  INVALID_PASSWORD: 'Password must be at least 8 characters with uppercase, lowercase, number, and special character',\n  INVALID_PHONE: 'Phone number must be 10 digits',\n  PASSWORD_MISMATCH: 'Passwords do not match',\n  INVALID_RATING: 'Rating must be between 1 and 5',\n  INVALID_NAME: 'Name must be between 2 and 50 characters',\n  INVALID_COURSE_CODE: 'Course code must contain only uppercase letters and numbers'\n};","map":{"version":3,"names":["isValidEmail","email","emailRegex","test","isValidPassword","password","passwordRegex","length","isValidPhone","phone","phoneRegex","isValidName","name","trim","isValidCourseCode","code","codeRegex","isValidRating","rating","Number","isInteger","isValidFeedbackMessage","message","isValidImageFile","file","validTypes","maxSize","isValid","error","includes","type","size","validateLoginForm","errors","Object","keys","validateRegisterForm","confirmPassword","validateProfileForm","dateOfBirth","address","birthDate","Date","today","age","getFullYear","validatePasswordChange","currentPassword","newPassword","validateFeedbackForm","course","validateCourseForm","description","instructor","credits","sanitizeInput","input","replace","formatDate","date","toLocaleDateString","year","month","day","formatDateTime","hour","minute","truncateText","text","maxLength","substring","getRatingColor","getRatingText","VALIDATION_PATTERNS","EMAIL","PASSWORD","PHONE","COURSE_CODE","VALIDATION_MESSAGES","REQUIRED","INVALID_EMAIL","INVALID_PASSWORD","INVALID_PHONE","PASSWORD_MISMATCH","INVALID_RATING","INVALID_NAME","INVALID_COURSE_CODE"],"sources":["C:/Users/lenovo/Practice Coding/course-feedback-system/frontend/src/utils/validation.js"],"sourcesContent":["// Email validation\r\nexport const isValidEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Password validation\r\nexport const isValidPassword = (password) => {\r\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\r\n  return password.length >= 8 && passwordRegex.test(password);\r\n};\r\n\r\n// Phone number validation (10 digits)\r\nexport const isValidPhone = (phone) => {\r\n  const phoneRegex = /^\\d{10}$/;\r\n  return phoneRegex.test(phone);\r\n};\r\n\r\n// Name validation\r\nexport const isValidName = (name) => {\r\n  return name.trim().length >= 2 && name.trim().length <= 50;\r\n};\r\n\r\n// Course code validation\r\nexport const isValidCourseCode = (code) => {\r\n  const codeRegex = /^[A-Z0-9]+$/;\r\n  return code.length >= 2 && code.length <= 20 && codeRegex.test(code);\r\n};\r\n\r\n// Rating validation\r\nexport const isValidRating = (rating) => {\r\n  return rating >= 1 && rating <= 5 && Number.isInteger(rating);\r\n};\r\n\r\n// Feedback message validation\r\nexport const isValidFeedbackMessage = (message) => {\r\n  return message.trim().length >= 10 && message.trim().length <= 1000;\r\n};\r\n\r\n// File validation for image upload\r\nexport const isValidImageFile = (file) => {\r\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\r\n  const maxSize = 5 * 1024 * 1024; // 5MB\r\n  \r\n  if (!file) return { isValid: false, error: 'No file selected' };\r\n  if (!validTypes.includes(file.type)) {\r\n    return { isValid: false, error: 'Only image files are allowed (JPEG, PNG, GIF, WebP)' };\r\n  }\r\n  if (file.size > maxSize) {\r\n    return { isValid: false, error: 'File size must be less than 5MB' };\r\n  }\r\n  \r\n  return { isValid: true };\r\n};\r\n\r\n// Form validation helpers\r\nexport const validateLoginForm = (email, password) => {\r\n  const errors = {};\r\n  \r\n  if (!email) {\r\n    errors.email = 'Email is required';\r\n  } else if (!isValidEmail(email)) {\r\n    errors.email = 'Please enter a valid email address';\r\n  }\r\n  \r\n  if (!password) {\r\n    errors.password = 'Password is required';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateRegisterForm = (name, email, password, confirmPassword) => {\r\n  const errors = {};\r\n  \r\n  if (!name) {\r\n    errors.name = 'Name is required';\r\n  } else if (!isValidName(name)) {\r\n    errors.name = 'Name must be between 2 and 50 characters';\r\n  }\r\n  \r\n  if (!email) {\r\n    errors.email = 'Email is required';\r\n  } else if (!isValidEmail(email)) {\r\n    errors.email = 'Please enter a valid email address';\r\n  }\r\n  \r\n  if (!password) {\r\n    errors.password = 'Password is required';\r\n  } else if (!isValidPassword(password)) {\r\n    errors.password = 'Password must be at least 8 characters with uppercase, lowercase, number, and special character';\r\n  }\r\n  \r\n  if (!confirmPassword) {\r\n    errors.confirmPassword = 'Please confirm your password';\r\n  } else if (password !== confirmPassword) {\r\n    errors.confirmPassword = 'Passwords do not match';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateProfileForm = (name, phone, dateOfBirth, address) => {\r\n  const errors = {};\r\n  \r\n  if (!name) {\r\n    errors.name = 'Name is required';\r\n  } else if (!isValidName(name)) {\r\n    errors.name = 'Name must be between 2 and 50 characters';\r\n  }\r\n  \r\n  if (phone && !isValidPhone(phone)) {\r\n    errors.phone = 'Phone number must be 10 digits';\r\n  }\r\n  \r\n  if (dateOfBirth) {\r\n    const birthDate = new Date(dateOfBirth);\r\n    const today = new Date();\r\n    const age = today.getFullYear() - birthDate.getFullYear();\r\n    \r\n    if (age < 13 || age > 100) {\r\n      errors.dateOfBirth = 'Please enter a valid date of birth';\r\n    }\r\n  }\r\n  \r\n  if (address && address.length > 200) {\r\n    errors.address = 'Address cannot exceed 200 characters';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validatePasswordChange = (currentPassword, newPassword, confirmPassword) => {\r\n  const errors = {};\r\n  \r\n  if (!currentPassword) {\r\n    errors.currentPassword = 'Current password is required';\r\n  }\r\n  \r\n  if (!newPassword) {\r\n    errors.newPassword = 'New password is required';\r\n  } else if (!isValidPassword(newPassword)) {\r\n    errors.newPassword = 'Password must be at least 8 characters with uppercase, lowercase, number, and special character';\r\n  }\r\n  \r\n  if (!confirmPassword) {\r\n    errors.confirmPassword = 'Please confirm your new password';\r\n  } else if (newPassword !== confirmPassword) {\r\n    errors.confirmPassword = 'Passwords do not match';\r\n  }\r\n  \r\n  if (currentPassword && newPassword && currentPassword === newPassword) {\r\n    errors.newPassword = 'New password must be different from current password';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateFeedbackForm = (course, rating, message) => {\r\n  const errors = {};\r\n  \r\n  if (!course) {\r\n    errors.course = 'Please select a course';\r\n  }\r\n  \r\n  if (!rating || rating === 0) {\r\n    errors.rating = 'Please provide a rating';\r\n  } else if (!isValidRating(rating)) {\r\n    errors.rating = 'Rating must be between 1 and 5';\r\n  }\r\n  \r\n  if (!message) {\r\n    errors.message = 'Feedback message is required';\r\n  } else if (!isValidFeedbackMessage(message)) {\r\n    errors.message = 'Feedback message must be between 10 and 1000 characters';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\nexport const validateCourseForm = (name, code, description, instructor, credits) => {\r\n  const errors = {};\r\n  \r\n  if (!name) {\r\n    errors.name = 'Course name is required';\r\n  } else if (name.length < 2 || name.length > 100) {\r\n    errors.name = 'Course name must be between 2 and 100 characters';\r\n  }\r\n  \r\n  if (!code) {\r\n    errors.code = 'Course code is required';\r\n  } else if (!isValidCourseCode(code)) {\r\n    errors.code = 'Course code must be 2-20 characters with only uppercase letters and numbers';\r\n  }\r\n  \r\n  if (description && description.length > 500) {\r\n    errors.description = 'Description cannot exceed 500 characters';\r\n  }\r\n  \r\n  if (instructor && instructor.length > 100) {\r\n    errors.instructor = 'Instructor name cannot exceed 100 characters';\r\n  }\r\n  \r\n  if (credits && (credits < 1 || credits > 10)) {\r\n    errors.credits = 'Credits must be between 1 and 10';\r\n  }\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Utility functions\r\nexport const sanitizeInput = (input) => {\r\n  return input.trim().replace(/[<>]/g, '');\r\n};\r\n\r\nexport const formatDate = (date) => {\r\n  if (!date) return '';\r\n  return new Date(date).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n};\r\n\r\nexport const formatDateTime = (date) => {\r\n  if (!date) return '';\r\n  return new Date(date).toLocaleDateString('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\nexport const truncateText = (text, maxLength = 150) => {\r\n  if (!text || text.length <= maxLength) return text;\r\n  return text.substring(0, maxLength) + '...';\r\n};\r\n\r\nexport const getRatingColor = (rating) => {\r\n  if (rating >= 4) return 'success';\r\n  if (rating >= 3) return 'warning';\r\n  return 'error';\r\n};\r\n\r\nexport const getRatingText = (rating) => {\r\n  if (rating >= 4) return 'Excellent';\r\n  if (rating >= 3) return 'Good';\r\n  if (rating >= 2) return 'Fair';\r\n  return 'Poor';\r\n};\r\n\r\n// Export validation patterns for reuse\r\nexport const VALIDATION_PATTERNS = {\r\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n  PASSWORD: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\r\n  PHONE: /^\\d{10}$/,\r\n  COURSE_CODE: /^[A-Z0-9]+$/\r\n};\r\n\r\nexport const VALIDATION_MESSAGES = {\r\n  REQUIRED: 'This field is required',\r\n  INVALID_EMAIL: 'Please enter a valid email address',\r\n  INVALID_PASSWORD: 'Password must be at least 8 characters with uppercase, lowercase, number, and special character',\r\n  INVALID_PHONE: 'Phone number must be 10 digits',\r\n  PASSWORD_MISMATCH: 'Passwords do not match',\r\n  INVALID_RATING: 'Rating must be between 1 and 5',\r\n  INVALID_NAME: 'Name must be between 2 and 50 characters',\r\n  INVALID_COURSE_CODE: 'Course code must contain only uppercase letters and numbers'\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAIC,KAAK,IAAK;EACrC,MAAMC,UAAU,GAAG,4BAA4B;EAC/C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAIC,QAAQ,IAAK;EAC3C,MAAMC,aAAa,GAAG,iEAAiE;EACvF,OAAOD,QAAQ,CAACE,MAAM,IAAI,CAAC,IAAID,aAAa,CAACH,IAAI,CAACE,QAAQ,CAAC;AAC7D,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAIC,KAAK,IAAK;EACrC,MAAMC,UAAU,GAAG,UAAU;EAC7B,OAAOA,UAAU,CAACP,IAAI,CAACM,KAAK,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIC,IAAI,IAAK;EACnC,OAAOA,IAAI,CAACC,IAAI,CAAC,CAAC,CAACN,MAAM,IAAI,CAAC,IAAIK,IAAI,CAACC,IAAI,CAAC,CAAC,CAACN,MAAM,IAAI,EAAE;AAC5D,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAIC,IAAI,IAAK;EACzC,MAAMC,SAAS,GAAG,aAAa;EAC/B,OAAOD,IAAI,CAACR,MAAM,IAAI,CAAC,IAAIQ,IAAI,CAACR,MAAM,IAAI,EAAE,IAAIS,SAAS,CAACb,IAAI,CAACY,IAAI,CAAC;AACtE,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAIC,MAAM,IAAK;EACvC,OAAOA,MAAM,IAAI,CAAC,IAAIA,MAAM,IAAI,CAAC,IAAIC,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC;AAC/D,CAAC;;AAED;AACA,OAAO,MAAMG,sBAAsB,GAAIC,OAAO,IAAK;EACjD,OAAOA,OAAO,CAACT,IAAI,CAAC,CAAC,CAACN,MAAM,IAAI,EAAE,IAAIe,OAAO,CAACT,IAAI,CAAC,CAAC,CAACN,MAAM,IAAI,IAAI;AACrE,CAAC;;AAED;AACA,OAAO,MAAMgB,gBAAgB,GAAIC,IAAI,IAAK;EACxC,MAAMC,UAAU,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;EACtF,MAAMC,OAAO,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;;EAEjC,IAAI,CAACF,IAAI,EAAE,OAAO;IAAEG,OAAO,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAmB,CAAC;EAC/D,IAAI,CAACH,UAAU,CAACI,QAAQ,CAACL,IAAI,CAACM,IAAI,CAAC,EAAE;IACnC,OAAO;MAAEH,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAsD,CAAC;EACzF;EACA,IAAIJ,IAAI,CAACO,IAAI,GAAGL,OAAO,EAAE;IACvB,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAkC,CAAC;EACrE;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAGA,CAAC/B,KAAK,EAAEI,QAAQ,KAAK;EACpD,MAAM4B,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAAChC,KAAK,EAAE;IACVgC,MAAM,CAAChC,KAAK,GAAG,mBAAmB;EACpC,CAAC,MAAM,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,EAAE;IAC/BgC,MAAM,CAAChC,KAAK,GAAG,oCAAoC;EACrD;EAEA,IAAI,CAACI,QAAQ,EAAE;IACb4B,MAAM,CAAC5B,QAAQ,GAAG,sBAAsB;EAC1C;EAEA,OAAO;IACLsB,OAAO,EAAEO,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC1B,MAAM,KAAK,CAAC;IACzC0B;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,oBAAoB,GAAGA,CAACxB,IAAI,EAAEX,KAAK,EAAEI,QAAQ,EAAEgC,eAAe,KAAK;EAC9E,MAAMJ,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACrB,IAAI,EAAE;IACTqB,MAAM,CAACrB,IAAI,GAAG,kBAAkB;EAClC,CAAC,MAAM,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,EAAE;IAC7BqB,MAAM,CAACrB,IAAI,GAAG,0CAA0C;EAC1D;EAEA,IAAI,CAACX,KAAK,EAAE;IACVgC,MAAM,CAAChC,KAAK,GAAG,mBAAmB;EACpC,CAAC,MAAM,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,EAAE;IAC/BgC,MAAM,CAAChC,KAAK,GAAG,oCAAoC;EACrD;EAEA,IAAI,CAACI,QAAQ,EAAE;IACb4B,MAAM,CAAC5B,QAAQ,GAAG,sBAAsB;EAC1C,CAAC,MAAM,IAAI,CAACD,eAAe,CAACC,QAAQ,CAAC,EAAE;IACrC4B,MAAM,CAAC5B,QAAQ,GAAG,iGAAiG;EACrH;EAEA,IAAI,CAACgC,eAAe,EAAE;IACpBJ,MAAM,CAACI,eAAe,GAAG,8BAA8B;EACzD,CAAC,MAAM,IAAIhC,QAAQ,KAAKgC,eAAe,EAAE;IACvCJ,MAAM,CAACI,eAAe,GAAG,wBAAwB;EACnD;EAEA,OAAO;IACLV,OAAO,EAAEO,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC1B,MAAM,KAAK,CAAC;IACzC0B;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMK,mBAAmB,GAAGA,CAAC1B,IAAI,EAAEH,KAAK,EAAE8B,WAAW,EAAEC,OAAO,KAAK;EACxE,MAAMP,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACrB,IAAI,EAAE;IACTqB,MAAM,CAACrB,IAAI,GAAG,kBAAkB;EAClC,CAAC,MAAM,IAAI,CAACD,WAAW,CAACC,IAAI,CAAC,EAAE;IAC7BqB,MAAM,CAACrB,IAAI,GAAG,0CAA0C;EAC1D;EAEA,IAAIH,KAAK,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,EAAE;IACjCwB,MAAM,CAACxB,KAAK,GAAG,gCAAgC;EACjD;EAEA,IAAI8B,WAAW,EAAE;IACf,MAAME,SAAS,GAAG,IAAIC,IAAI,CAACH,WAAW,CAAC;IACvC,MAAMI,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;IACxB,MAAME,GAAG,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC,GAAGJ,SAAS,CAACI,WAAW,CAAC,CAAC;IAEzD,IAAID,GAAG,GAAG,EAAE,IAAIA,GAAG,GAAG,GAAG,EAAE;MACzBX,MAAM,CAACM,WAAW,GAAG,oCAAoC;IAC3D;EACF;EAEA,IAAIC,OAAO,IAAIA,OAAO,CAACjC,MAAM,GAAG,GAAG,EAAE;IACnC0B,MAAM,CAACO,OAAO,GAAG,sCAAsC;EACzD;EAEA,OAAO;IACLb,OAAO,EAAEO,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC1B,MAAM,KAAK,CAAC;IACzC0B;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMa,sBAAsB,GAAGA,CAACC,eAAe,EAAEC,WAAW,EAAEX,eAAe,KAAK;EACvF,MAAMJ,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACc,eAAe,EAAE;IACpBd,MAAM,CAACc,eAAe,GAAG,8BAA8B;EACzD;EAEA,IAAI,CAACC,WAAW,EAAE;IAChBf,MAAM,CAACe,WAAW,GAAG,0BAA0B;EACjD,CAAC,MAAM,IAAI,CAAC5C,eAAe,CAAC4C,WAAW,CAAC,EAAE;IACxCf,MAAM,CAACe,WAAW,GAAG,iGAAiG;EACxH;EAEA,IAAI,CAACX,eAAe,EAAE;IACpBJ,MAAM,CAACI,eAAe,GAAG,kCAAkC;EAC7D,CAAC,MAAM,IAAIW,WAAW,KAAKX,eAAe,EAAE;IAC1CJ,MAAM,CAACI,eAAe,GAAG,wBAAwB;EACnD;EAEA,IAAIU,eAAe,IAAIC,WAAW,IAAID,eAAe,KAAKC,WAAW,EAAE;IACrEf,MAAM,CAACe,WAAW,GAAG,sDAAsD;EAC7E;EAEA,OAAO;IACLrB,OAAO,EAAEO,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC1B,MAAM,KAAK,CAAC;IACzC0B;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMgB,oBAAoB,GAAGA,CAACC,MAAM,EAAEhC,MAAM,EAAEI,OAAO,KAAK;EAC/D,MAAMW,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACiB,MAAM,EAAE;IACXjB,MAAM,CAACiB,MAAM,GAAG,wBAAwB;EAC1C;EAEA,IAAI,CAAChC,MAAM,IAAIA,MAAM,KAAK,CAAC,EAAE;IAC3Be,MAAM,CAACf,MAAM,GAAG,yBAAyB;EAC3C,CAAC,MAAM,IAAI,CAACD,aAAa,CAACC,MAAM,CAAC,EAAE;IACjCe,MAAM,CAACf,MAAM,GAAG,gCAAgC;EAClD;EAEA,IAAI,CAACI,OAAO,EAAE;IACZW,MAAM,CAACX,OAAO,GAAG,8BAA8B;EACjD,CAAC,MAAM,IAAI,CAACD,sBAAsB,CAACC,OAAO,CAAC,EAAE;IAC3CW,MAAM,CAACX,OAAO,GAAG,yDAAyD;EAC5E;EAEA,OAAO;IACLK,OAAO,EAAEO,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC1B,MAAM,KAAK,CAAC;IACzC0B;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMkB,kBAAkB,GAAGA,CAACvC,IAAI,EAAEG,IAAI,EAAEqC,WAAW,EAAEC,UAAU,EAAEC,OAAO,KAAK;EAClF,MAAMrB,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACrB,IAAI,EAAE;IACTqB,MAAM,CAACrB,IAAI,GAAG,yBAAyB;EACzC,CAAC,MAAM,IAAIA,IAAI,CAACL,MAAM,GAAG,CAAC,IAAIK,IAAI,CAACL,MAAM,GAAG,GAAG,EAAE;IAC/C0B,MAAM,CAACrB,IAAI,GAAG,kDAAkD;EAClE;EAEA,IAAI,CAACG,IAAI,EAAE;IACTkB,MAAM,CAAClB,IAAI,GAAG,yBAAyB;EACzC,CAAC,MAAM,IAAI,CAACD,iBAAiB,CAACC,IAAI,CAAC,EAAE;IACnCkB,MAAM,CAAClB,IAAI,GAAG,6EAA6E;EAC7F;EAEA,IAAIqC,WAAW,IAAIA,WAAW,CAAC7C,MAAM,GAAG,GAAG,EAAE;IAC3C0B,MAAM,CAACmB,WAAW,GAAG,0CAA0C;EACjE;EAEA,IAAIC,UAAU,IAAIA,UAAU,CAAC9C,MAAM,GAAG,GAAG,EAAE;IACzC0B,MAAM,CAACoB,UAAU,GAAG,8CAA8C;EACpE;EAEA,IAAIC,OAAO,KAAKA,OAAO,GAAG,CAAC,IAAIA,OAAO,GAAG,EAAE,CAAC,EAAE;IAC5CrB,MAAM,CAACqB,OAAO,GAAG,kCAAkC;EACrD;EAEA,OAAO;IACL3B,OAAO,EAAEO,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC1B,MAAM,KAAK,CAAC;IACzC0B;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMsB,aAAa,GAAIC,KAAK,IAAK;EACtC,OAAOA,KAAK,CAAC3C,IAAI,CAAC,CAAC,CAAC4C,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;AAC1C,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAClC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,OAAO,IAAIjB,IAAI,CAACiB,IAAI,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;IAChDC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIL,IAAI,IAAK;EACtC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,OAAO,IAAIjB,IAAI,CAACiB,IAAI,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;IAChDC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdE,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAG,GAAG,KAAK;EACrD,IAAI,CAACD,IAAI,IAAIA,IAAI,CAAC7D,MAAM,IAAI8D,SAAS,EAAE,OAAOD,IAAI;EAClD,OAAOA,IAAI,CAACE,SAAS,CAAC,CAAC,EAAED,SAAS,CAAC,GAAG,KAAK;AAC7C,CAAC;AAED,OAAO,MAAME,cAAc,GAAIrD,MAAM,IAAK;EACxC,IAAIA,MAAM,IAAI,CAAC,EAAE,OAAO,SAAS;EACjC,IAAIA,MAAM,IAAI,CAAC,EAAE,OAAO,SAAS;EACjC,OAAO,OAAO;AAChB,CAAC;AAED,OAAO,MAAMsD,aAAa,GAAItD,MAAM,IAAK;EACvC,IAAIA,MAAM,IAAI,CAAC,EAAE,OAAO,WAAW;EACnC,IAAIA,MAAM,IAAI,CAAC,EAAE,OAAO,MAAM;EAC9B,IAAIA,MAAM,IAAI,CAAC,EAAE,OAAO,MAAM;EAC9B,OAAO,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMuD,mBAAmB,GAAG;EACjCC,KAAK,EAAE,4BAA4B;EACnCC,QAAQ,EAAE,iEAAiE;EAC3EC,KAAK,EAAE,UAAU;EACjBC,WAAW,EAAE;AACf,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG;EACjCC,QAAQ,EAAE,wBAAwB;EAClCC,aAAa,EAAE,oCAAoC;EACnDC,gBAAgB,EAAE,iGAAiG;EACnHC,aAAa,EAAE,gCAAgC;EAC/CC,iBAAiB,EAAE,wBAAwB;EAC3CC,cAAc,EAAE,gCAAgC;EAChDC,YAAY,EAAE,0CAA0C;EACxDC,mBAAmB,EAAE;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}